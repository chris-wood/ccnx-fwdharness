{"name":"ccnx-pktpusher","tagline":"","body":"# ccnx-pktpusher\r\n\r\n## Overview\r\n\r\nThis is a project to stress test CCNx-compliant forwarders. The test\r\nconsists of three elements: a packet sender, receiver, and forwarder. \r\nThe sender is connected to the forwarder to push packets through\r\nthe forwarder at a given rate (currently: as fast as possible)\r\nand the receiver is connected to the forwarder to receive packets and \r\nrespond with pre-computed packets. This general setup is shown below.\r\n\r\n```\r\n     sender window\r\n    +-+-+-+-+-+-+-+\r\n    | | | | | | | |\r\n    +---+-+++-+---+\r\n+--------+   |    +-----------+       +----------+\r\n|        +---+---->           +------->          |\r\n| Sender |        | Forwarder |       | Receiver |\r\n|        <--------+           <-------+          |\r\n+--------+        +-----------+       +----------+\r\n```\r\n\r\nThe sender controls the rate at which packets are sent by windowing.\r\nThat is, packets are sent and inserted into the window until the \r\nwindow is full. The sender then attempts to receive packets. To keep\r\nthe forwarder busy, sending is always given priority over receiving. \r\nThis means that the window is usually full for a given packet load. \r\n\r\n## Packet Generation\r\n\r\nPackets are generated using the [ccnx-pktgen tool](https://github.com/chris-wood/ccnx-pktgen).\r\nThis can generate interest and content object pairs by specifying the \r\nname size, name component length, and the content object payload size. \r\nThe tool will create a pair of binary files containing a sequence of wire-encoded\r\ninterest and content objects. The sender and receiver use these files to \r\nbuild an indexes that allow fast lookup and retrieval. \r\n\r\n## Forwarder Connections\r\n\r\nUDP and TCP connections for the PARC Metis forwarder are supported.\r\n\r\n## Programmable Packets\r\n\r\nOne feature of ccnx-pktpusher is that it allows programmable packets from the \r\nflux tool to be \"executed\" as a regular program. The ccnx-pktpusher implements\r\na VM that is capable of executing binary programmable packet (.pp) files output\r\nfrom flux. This VM, called PPVM, has the following ISA (inspired by the JVM [1]):\r\n\r\n### PPVM ISA\r\n\r\n- TODO\r\n\r\n# References\r\n\r\n- [1] https://docs.oracle.com/javase/specs/jvms/se7/html/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}